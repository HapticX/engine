name: Testing

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/*'
      - '*.md'
      - '*.nimble'
      - '.gitignore'
      - 'LICENSE'

jobs:
  before:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "not contains '[skip ci]'"

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        nim_version:
          - '1.0.0'
          - '1.2.18'
          - '1.4.8'
          - 'stable'
    needs: before
    env:
      TIMEOUT_EXIT_STATUS: 124
    steps:
      - uses: actions/checkout@v1
      - name: Cache nimble
        id: cache-nimble
        uses: actions/cache@v1
        with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble-${{ hashFiles('*.nimble') }}
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ matrix.nim_version }}

      - name: Fix apt packages
        run: |
          # see. https://github.com/actions/virtual-environments/issues/675
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo apt update -yqq
      
      - name: Install xvfb
        run: sudo apt install -y xvfb
      
      - name: Install mingw
        run: sudo apt install -y mingw-w64
      
      - name: Install sdl2
        run: sudo apt install --fix-missing -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev

      - name: Build tests
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "# ---===    Testing via C backend [$file]    ===--- #"
            nim c $file
            echo "# ---===    Testing via C++ backend [$file]    ===--- #"
            nim cpp $file
            echo "# ---===    Testing via JS backend [$file]    ===--- #"
            nim js --noMain --app:lib $file
          done
        shell: bash

      - name: Cross build tests
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "# ---===    Compile for Win AMD64 [$file]    ===--- #"
            nim c -d:mingw --cpu:amd64 $file
            echo "# ---===    Compile for Win i386 [$file]    ===--- #"
            nim c -d:mingw --cpu:i386 $file
            echo "# ---===    Compile for Android [$file]    ===--- #"
            nim c -c --cpu:arm --os:android -d:androidNDK  --noMain:on $file
            echo "# ---===    Compile for iOS [$file]    ===--- #"
            nim c -c --os:ios --noMain:on $file
            echo "# ---===    Compile for Nintendo Switch [$file]    ===--- #"
            nim c -c --os:nintendoswitch $file
            timeout 2 xvfb-run --auto-servernum --server-num=1 ./${file%%.nim} || [ $? -eq ${{ env.TIMEOUT_EXIT_STATUS }} ]
          done
        shell: bash