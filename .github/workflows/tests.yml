name: Testing

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/*'
      - '*.md'
      - '*.nimble'
      - '.gitignore'
      - 'LICENSE'

jobs:
  before:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "not contains '[skip ci]'"

  UbuntuBuild:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        nim_version:
          - '1.0.0'
          - '1.2.18'
          - '1.4.8'
          - 'stable'
    needs: before
    env:
      TIMEOUT_EXIT_STATUS: 124
    steps:
      - uses: actions/checkout@v3
      - name: Cache nimble
        id: cache-nimble
        uses: actions/cache@v3
        with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble-${{ hashFiles('*.nimble') }}
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ matrix.nim_version }}

      - name: Fix apt packages
        run: |
          # see. https://github.com/actions/virtual-environments/issues/675
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo apt update -yqq
      
      - name: Install xvfb
        run: sudo apt install -y xvfb
      
      - name: Install mingw and objective C
        run: sudo apt install -y mingw-w64 gobjc gnustep gnustep-devel
      
      - name: Install sdl2
        run: sudo apt install --fix-missing -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev

      - name: Download GLEW
        run: |
          sudo apt-get install -y libglew-dev
      
      - name: Install Vulkan API
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.239-jammy.list https://packages.lunarg.com/vulkan/1.3.239/lunarg-vulkan-1.3.239-jammy.list
          sudo apt update
          sudo apt install -y vulkan-sdk

      - name: Build tests
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "# ---===    Testing via C backend [$file]    ===--- #"
            nim c -d:useGlew --passC:"-flto -useGlew" --passC:"-Iglew\include" --passL:"-Lglew\lib\Release\x64 -lGLEW -lGL"  $file
            echo "# ---===    Testing via C++ backend [$file]    ===--- #"
            nim cpp -d:useGlew --passC:"-flto -useGlew" --passC:"-Iglew\include" --passL:"-Lglew\lib\Release\x64 -lGLEW -lGL"  $file
            echo "# ---===    Testing via ObjC backend [$file]    ===--- #"
            nim objc -d:useGlew --passC:"-flto -useGlew" --passC:"-Iglew\include" --passL:"-Lglew\lib\Release\x64 -lGLEW -lGL"  $file
            echo "# ---===    Testing via JS backend [$file]    ===--- #"
            nim js --noMain --app:lib $file
          done
        shell: bash

      - name: Build tests via Vulkan
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "# ---===    Testing via C backend [$file]    ===--- #"
            nim c -d:vulkan $file
            echo "# ---===    Testing via C++ backend [$file]    ===--- #"
            nim cpp -d:vulkan $file
            echo "# ---===    Testing via ObjC backend [$file]    ===--- #"
            nim objc -d:vulkan $file
          done
        shell: bash

      - name: Cross build tests
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "# ---===    Compile for Win AMD64 [$file]    ===--- #"
            nim c -d:mingw --cpu:amd64 $file
            echo "# ---===    Compile for Win i386 [$file]    ===--- #"
            nim c -d:mingw --cpu:i386 $file
            echo "# ---===    Compile for Android [$file]    ===--- #"
            nim c -c --cpu:arm --os:android -d:androidNDK  --noMain:on $file
            echo "# ---===    Compile for iOS [$file]    ===--- #"
            nim c -c --os:ios --noMain:on $file
            echo "# ---===    Compile for Nintendo Switch [$file]    ===--- #"
            nim c -c --os:nintendoswitch $file
          done
        shell: bash

  WinBuild:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
        nim_version:
          - '1.0.0'
          - '1.2.18'
          - '1.4.8'
          - 'stable'
    needs: before
    env:
      TIMEOUT_EXIT_STATUS: 124
    steps:
      - uses: actions/checkout@v3
      - name: Cache nimble
        id: cache-nimble
        uses: actions/cache@v3
        with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble-${{ hashFiles('*.nimble') }}
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ matrix.nim_version }}

      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Install MinGW
        run: |
          choco install mingw
          echo "C:\tools\mingw64\bin" >> $GITHUB_PATH
          choco install mingw-get
          mingw-get install mingw-developer-toolkit
          mingw-get install mingw32-base
          mingw-get install mingw32-gcc-g++
          mingw-get install mingw32-gcc-objc
          mingw-get install msys-base
          echo "C:\tools\mingw32\bin" >> $GITHUB_PATH
          echo "C:\tools\mingw32\msys\1.0\bin" >> $GITHUB_PATH
        
      - name: Download GLEW
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://sourceforge.net/projects/glew/files/glew/2.1.0/glew-2.1.0-win32.zip -OutFile glew.zip
          Expand-Archive -Path glew.zip -DestinationPath glew
          Copy-Item -Path glew\glew-2.1.0\include -Destination glew\include -Recurse
          Copy-Item -Path glew\glew-2.1.0\lib\Release\x64\glew32.lib -Destination glew\lib\Release\x64

      - name: Download SDL2
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/libsdl-org/SDL/releases/download/release-2.26.4/SDL2-2.26.4-win32-x64.zip -OutFile SDL2.zip
          Expand-Archive -Path SDL2.zip -DestinationPath SDL2
          Copy-Item -Path SDL2\SDL2-2.26.4\lib\x64\*.dll -Destination $env:USERPROFILE\.nimble\bin
      
      - name: Download SDL2-ttf
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-2.20.2-win32-x64.zip -OutFile SDL2_ttf.zip
          Expand-Archive -Path SDL2_ttf.zip -DestinationPath SDL2_ttf
          Copy-Item -Path SDL2_ttf\SDL2_ttf-2.20.2\lib\x64\*.dll -Destination $env:USERPROFILE\.nimble\bin

      - name: Download SDL2-image
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/libsdl-org/SDL_image/releases/download/release-2.6.3/SDL2_image-2.6.3-win32-x64.zip -OutFile SDL2_image.zip
          Expand-Archive -Path SDL2_image.zip -DestinationPath SDL2_image
          Copy-Item -Path SDL2_image\SDL2_image-2.6.3\lib\x64\*.dll -Destination $env:USERPROFILE\.nimble\bin

      - name: Download SDL2-mixer
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.3/SDL2_mixer-2.6.3-win32-x64.zip -OutFile SDL2_mixer.zip
          Expand-Archive -Path SDL2_mixer.zip -DestinationPath SDL2_mixer
          Copy-Item -Path SDL2_mixer\SDL2_mixer-2.6.3\lib\x64\*.dll -Destination $env:USERPROFILE\.nimble\bin

      
      - name: Install Vulkan SDK
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe -OutFile VulkanSDK.exe
          Start-Process -FilePath VulkanSDK.exe -ArgumentList "/S", "/D=C:\VulkanSDK" -Wait

      - name: Build tests
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "# ---===    Testing via C backend [$file]    ===--- #"
            nim c -d:useGlew --passC:"-flto -useGlew" --passC:"-Iglew\include" --passL:"-Lglew\lib\Release\x64 -lglew32 -lopengl32" $file
            echo "# ---===    Testing via C++ backend [$file]    ===--- #"
            nim cpp -d:useGlew --passC:"-flto -useGlew" --passC:"-Iglew\include" --passL:"-Lglew\lib\Release\x64 -lglew32 -lopengl32" $file
            echo "# ---===    Testing via ObjC backend [$file]    ===--- #"
            nim objc  -d:useGlew --passC:"-flto -useGlew" --passC:"-Iglew\include" --passL:"-Lglew\lib\Release\x64 -lglew32 -lopengl32" $file
            echo "# ---===    Testing via JS backend [$file]    ===--- #"
            nim js --noMain --app:lib $file
          done
        shell: bash

      - name: Build tests via Vulkan
        run: |
          cd tests
          for file in $(ls -v test*.nim); do
            echo "# ---===    Testing via C backend [$file]    ===--- #"
            nim c -d:vulkan $file
            echo "# ---===    Testing via C++ backend [$file]    ===--- #"
            nim cpp -d:vulkan $file
            echo "# ---===    Testing via ObjC backend [$file]    ===--- #"
            nim objc -d:vulkan $file
          done
        shell: bash